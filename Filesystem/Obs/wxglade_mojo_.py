#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.1 on Tue May 22 21:06:15 2018
#

import wx
import wx.grid

import numpy
import wxDialogs
import DefaultParams

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
from typing import Any


class MojoControlPanel(wx.Frame):
    def __init__(self, UserInfo, *args, **kwds):

        # begin wxGlade: MojoControlPanel.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, UserInfo, *args, **kwds)
        self.SetSize((800, 500))
        ###
        self.UserInfo = UserInfo
        ###
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(0, "Import", "")
        self.Bind(wx.EVT_MENU, self.Import, id=0)
        wxglade_tmp_menu.Append(1, "Select Mojo File Folder", "")
        self.Bind(wx.EVT_MENU, self.SelectMojoFile, id=1)
        wxglade_tmp_menu.Append(2, "Export Mojo Files", "")
        self.Bind(wx.EVT_MENU, self.ExportMojoFiles, id=2)
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(3, "TIFF (16bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportImagesTiff16, id=3)
        wxglade_tmp_menu_sub.Append(4, "TIFF (8bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportImagesTiff8, id=4)
        wxglade_tmp_menu_sub.Append(5, "PNG (16bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportImagesPng16, id=5)
        wxglade_tmp_menu_sub.Append(6, "PNG (8bit, GrayScale)", "")
        self.Bind(wx.EVT_MENU, self.ExportImagesPng8, id=6)
        wxglade_tmp_menu.Append(wx.ID_ANY, "Export Images", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(7, "TIFF (16bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsTiff16, id=7)
        wxglade_tmp_menu_sub.Append(8, "TIFF (8bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsTiff8, id=8)
        wxglade_tmp_menu_sub.Append(9, "TIFF (8bit, Color)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsTiffRgb, id=9)
        wxglade_tmp_menu_sub.Append(10, "PNG (16bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsPng16, id=10)
        wxglade_tmp_menu_sub.Append(11, "PNG (8bit, GrayScale)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsPng8, id=11)
        wxglade_tmp_menu_sub.Append(12, "PNG (8bit, Color)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsPngRgb, id=12)
        wxglade_tmp_menu_sub.Append(13, "Numpy (32bit)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsNumpy, id=13)
        wxglade_tmp_menu.Append(wx.ID_ANY, "Export Segmenation", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(14, "Exit", "")
        self.Bind(wx.EVT_MENU, self.Exit, id=14)
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.MojoControlPanel_statusbar = self.CreateStatusBar(1)
        
        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL | wx.TB_HORZ_TEXT)
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.AddTool(100, "Execute", wx.Bitmap("..\\icons\\SegmentationCommit.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Execute 3D merge and 3D split", "")
        self.frame_toolbar.AddTool(101, "Undo", wx.Bitmap("..\\icons\\SegmentationUndo.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Undo", "")
        self.frame_toolbar.AddTool(102, "Redo", wx.Bitmap("..\\icons\\SegmentationRedo.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Redo", "")
        # Tool Bar end
        self.Index2_Sizer = wx.Panel(self, wx.ID_ANY)
        self.grid1 = wx.grid.Grid(self.Index2_Sizer, 1, size=(1, 1))
        self.ClearB1 = wx.Button(self.Index2_Sizer, 200, "Clear")
        self.grid2 = wx.grid.Grid(self.Index2_Sizer, 2, size=(1, 1))
        self.ClearB2 = wx.Button(self.Index2_Sizer, 201, "Clear")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.Execute, id=100)
        self.Bind(wx.EVT_TOOL, self.Undo, id=101)
        self.Bind(wx.EVT_TOOL, self.Redo, id=102)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols1, id=1)
        self.Bind(wx.EVT_BUTTON, self.ClearMerge, id=200)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols2, id=2)
        self.Bind(wx.EVT_BUTTON, self.ClearSplit, id=201)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MojoControlPanel.__set_properties
        self.SetTitle("Mojo Control Panel")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("..\\icons\\Mojo2_16.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.MojoControlPanel_statusbar.SetStatusWidths([-1])

        # statusbar fields
        MojoControlPanel_statusbar_fields = ["Target Mojo Folder: None"]
        for i in range(len(MojoControlPanel_statusbar_fields)):
            self.MojoControlPanel_statusbar.SetStatusText(MojoControlPanel_statusbar_fields[i], i)
        self.frame_toolbar.Realize()
        self.grid1.CreateGrid(10, 3)
        self.grid1.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid1.SetColLabelValue(0, "Conn1")
        self.grid1.SetColLabelValue(1, "Conn2")
        self.grid1.SetColLabelValue(2, "Conn3")
        self.grid1.SetMinSize((316, 2000))
        self.ClearB1.SetDefault()
        self.grid2.CreateGrid(10, 1)
        self.grid2.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid2.SetColLabelValue(0, "Target Id")
        self.ClearB2.SetDefault()
        self.Index2_Sizer.SetMinSize((316, 2000))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MojoControlPanel.__do_layout
        root = wx.BoxSizer(wx.VERTICAL)
        sizer1 = wx.BoxSizer(wx.HORIZONTAL)
        SizerC2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        SizerC1 = wx.BoxSizer(wx.VERTICAL)
        Index1_Sizer = wx.BoxSizer(wx.HORIZONTAL)
        bitmap_1 = wx.StaticBitmap(self.Index2_Sizer, wx.ID_ANY, wx.Bitmap("..\\icons\\Merge3D_32.png", wx.BITMAP_TYPE_ANY))
        Index1_Sizer.Add(bitmap_1, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label1 = wx.StaticText(self.Index2_Sizer, wx.ID_ANY, "3D Merge")
        Index1_Sizer.Add(label1, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        SizerC1.Add(Index1_Sizer, 0, 0, 0)
        SizerC1.Add(self.grid1, 1, wx.ALL | wx.EXPAND, 5)
        SizerC1.Add(self.ClearB1, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer1.Add(SizerC1, 1, wx.EXPAND, 0)
        bitmap_2 = wx.StaticBitmap(self.Index2_Sizer, wx.ID_ANY, wx.Bitmap("..\\icons\\Split3D_32.png", wx.BITMAP_TYPE_ANY))
        sizer_2.Add(bitmap_2, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label1_copy = wx.StaticText(self.Index2_Sizer, wx.ID_ANY, "3D Split")
        sizer_2.Add(label1_copy, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        SizerC2.Add(sizer_2, 0, 0, 0)
        SizerC2.Add(self.grid2, 1, wx.ALL | wx.EXPAND, 5)
        SizerC2.Add(self.ClearB2, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer1.Add(SizerC2, 1, wx.EXPAND, 0)
        self.Index2_Sizer.SetSizer(sizer1)
        root.Add(self.Index2_Sizer, 0, wx.EXPAND, 0)
        self.SetSizer(root)
        self.Layout()
        # end wxGlade


    def Import(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.ImportImagesSegments = ImportImagesSegments(None, self.UserInfo, wx.ID_ANY, "")
        self.ImportImagesSegments.Show()
        return True

    def SelectMojoFile(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectMojoFolder(self,event,self.UserInfo)

    def ExportMojoFiles(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectMojoExportFolder(self, event, self.UserInfo)

    def ExportImagesTiff16(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectImageExportFolder(self, event, self.UserInfo,'tiff16')

    def ExportImagesTiff8(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectImageExportFolder(self, event, self.UserInfo,'tiff8')

    def ExportImagesPng16(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectImageExportFolder(self, event, self.UserInfo,'png16')

    def ExportImagesPng8(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectImageExportFolder(self, event, self.UserInfo,'png8')

    def ExportIdsTiff16(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'tiff16')

    def ExportIdsTiff8(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'tiff8')

    def ExportIdsTiffRgb(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'TiffC')

    def ExportIdsPng16(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'Png16')

    def ExportIdsPng8(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'Png8')

    def ExportIdsPngRgb(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'PngC')

    def ExportIdsNumpy(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'PngNpy')

    def Exit(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.Close()

    def Execute(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print 'Create ID tables for 3D merge...'
        MergeIDs = []
        for col in range(self.NumMergeCol):
            TargetColVals = [self.grid1.GetCellValue(row, col).encode("UTF-8") for row in range(self.NumMergeRow)]
            TargetColVals = [i for i in TargetColVals if i is not '']
            TargetColVals = [int(i) for i in TargetColVals]
            if TargetColVals != []:
                MergeIDs.append(np.array(TargetColVals, dtype='uint32'))
            print np.array(TargetColVals)
        print MergeIDs
        # changeIDs.main(MergeIDs)

    def Undo(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'Undo' not implemented!")
        event.Skip()

    def Redo(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'Redo' not implemented!")
        event.Skip()

    def AppendRowsCols1(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'AppendRowsCols1' not implemented!")
        #pos = event.GetPosition()
        event.Skip()

    def ClearMerge(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.grid1.ClearGrid()

    def AppendRowsCols2(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'AppendRowsCols2' not implemented!")
        #pos = event.GetPosition()
        event.Skip()

    def ClearSplit(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.grid2.ClearGrid()



# end of class MojoControlPanel

class MyDialog(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.Append_Row_Number = wx.Button(self, wx.ID_ANY, "Number of Rows")
        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "1", style=wx.TE_RIGHT)
        self.button_1 = wx.Button(self, wx.ID_ANY, "Number of Columns")
        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "1", style=wx.TE_RIGHT)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        grid_sizer_1 = wx.GridSizer(0, 2, 0, 0)
        grid_sizer_1.Add(self.Append_Row_Number, 0, wx.ALL, 5)
        grid_sizer_1.Add(self.text_ctrl_1, 0, wx.ALL, 5)
        grid_sizer_1.Add(self.button_1, 0, wx.ALL, 5)
        grid_sizer_1.Add(self.text_ctrl_2, 0, wx.ALL, 5)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyDialog

class ImportImagesSegments(wx.Frame):
    def __init__(self, UserInfo, *args, **kwds):
        # begin wxGlade: ImportImagesSegments.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        ###
        self.UserInfo = UserInfo
        ###

        self.SetSize((837, 211))
        self.panel_5 = wx.Panel(self, wx.ID_ANY)
        self.panel_4 = wx.Panel(self, wx.ID_ANY)
        self.SourceImageFolder_Name_copy = wx.TextCtrl(self.panel_4, 1, "")
        self.SourceSegmentationFolder_Name_copy = wx.TextCtrl(self.panel_4, 2, "")
        self.DestinationMojoFolder_Name_copy = wx.TextCtrl(self.panel_4, 3, "")
        self.button4 = wx.Button(self.panel_4, wx.ID_OK, "")
        self.panel_3 = wx.Panel(self, wx.ID_ANY)
        self.BrowseSourceImageFolder = wx.Button(self.panel_3, wx.ID_ANY, "Browse...")
        self.BrowseSourceSementationFolder = wx.Button(self.panel_3, wx.ID_ANY, "Browse...")
        self.BrowseDestinationMojoFolder = wx.Button(self.panel_3, wx.ID_ANY, "Browse...")
        self.button5 = wx.Button(self.panel_3, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.ExecuteImport, id=1)
        self.Bind(wx.EVT_BUTTON, self.BrowseImageFolder, self.BrowseSourceImageFolder)
        self.Bind(wx.EVT_BUTTON, self.BrowseSegmentationFolder, self.BrowseSourceSementationFolder)
        self.Bind(wx.EVT_BUTTON, self.BrowseMojoFolder, self.BrowseDestinationMojoFolder)
        self.Bind(wx.EVT_BUTTON, self.Cancel, self.button5)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ImportImagesSegments.__set_properties
        self.SetTitle("Import Images & Segments")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("..\\icons\\Mojo2_16.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.panel_5.SetMinSize((180, 1000))
        self.SourceImageFolder_Name_copy.SetMinSize((426, 26))
        self.SourceSegmentationFolder_Name_copy.SetMinSize((426, 26))
        self.DestinationMojoFolder_Name_copy.SetMinSize((426, 26))
        self.button4.SetMinSize((88, 26))
        self.panel_4.SetMinSize((544, 2000))
        self.BrowseSourceImageFolder.SetMinSize((88, 26))
        self.BrowseSourceSementationFolder.SetMinSize((88, 26))
        self.BrowseDestinationMojoFolder.SetMinSize((88, 26))
        self.button5.SetMinSize((86, 26))
        self.panel_3.SetMinSize((100, 1500))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ImportImagesSegments.__do_layout
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer1 = wx.BoxSizer(wx.VERTICAL)
        ImportImageFolder = wx.StaticText(self.panel_5, wx.ID_ANY, "Source Image Folder\n(TIFF/PNG)")
        ImportImageFolder.SetMinSize((180, 30))
        sizer1.Add(ImportImageFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        SourceSegmentationFolder = wx.StaticText(self.panel_5, wx.ID_ANY, "Source Segmentation Folder\n(TIFF/PNG)")
        SourceSegmentationFolder.SetMinSize((180, 30))
        sizer1.Add(SourceSegmentationFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        ImportImageFolder_copy_1 = wx.StaticText(self.panel_5, wx.ID_ANY, "Destination Mojo Folder")
        ImportImageFolder_copy_1.SetMinSize((180, 30))
        sizer1.Add(ImportImageFolder_copy_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        self.panel_5.SetSizer(sizer1)
        sizer_6.Add(self.panel_5, 0, 0, 0)
        sizer_8.Add(self.SourceImageFolder_Name_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 7)
        sizer_8.Add(self.SourceSegmentationFolder_Name_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 7)
        sizer_8.Add(self.DestinationMojoFolder_Name_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 7)
        sizer_8.Add(self.button4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.panel_4.SetSizer(sizer_8)
        sizer_6.Add(self.panel_4, 1, 0, 0)
        self.sizer_9.Add(self.BrowseSourceImageFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.sizer_9.Add(self.BrowseSourceSementationFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.sizer_9.Add(self.BrowseDestinationMojoFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.sizer_9.Add(self.button5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.panel_3.SetSizer(self.sizer_9)
        sizer_6.Add(self.panel_3, 0, 0, 0)
        self.SetSizer(sizer_6)
        self.Layout()
        # end wxGlade

    def ExecuteImport(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        print("Event handler 'ExecuteImport' not implemented!")
        event.Skip()

    def BrowseImageFolder(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        print("Event handler 'BrowseImageFolder' not implemented!")
        event.Skip()

    def BrowseSegmentationFolder(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        print("Event handler 'BrowseSegmentationFolder' not implemented!")
        event.Skip()

    def BrowseMojoFolder(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        print("Event handler 'BrowseMojoFolder' not implemented!")
        event.Skip()

    def Cancel(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        print("Event handler 'Cancel' not implemented!")
        event.Skip()

# end of class ImportImagesSegments

class MyApp(wx.App):
    def OnInit(self):
        self.UserInfo = DefaultParams.User()
        self.MojoControlPanel = MojoControlPanel(None, self.UserInfo, wx.ID_ANY, "")
        self.SetTopWindow(self.MojoControlPanel)
        self.MojoControlPanel.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
