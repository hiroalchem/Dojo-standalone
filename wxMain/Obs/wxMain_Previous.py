#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.1 on Sun May 27 00:32:36 2018
#

import wx
import wx.grid


import wxDialogs
import DefaultParams
import ImportImgSeg
import UndoRedo
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
from typing import Any


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class ImportImagesSegments(wx.Frame):
    def __init__(self, *args, **kwds):


        ##
        ##
        [self.parent, self.UserInfo] = kwds.pop('sim_name')
        ##
        ##

        # begin wxGlade: ImportImagesSegments.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 200))
        self.p1 = wx.Panel(self, wx.ID_ANY)
        self.p2 = wx.Panel(self, wx.ID_ANY)
        self.SourceImageFolder = wx.TextCtrl(self.p2, 1, "")
        self.SourceSegmentationFolder = wx.TextCtrl(self.p2, 2, "")
        self.DestinationMojoFolder = wx.TextCtrl(self.p2, 3, "")
        self.ok = wx.Button(self.p2, wx.ID_OK, "")
        self.p3 = wx.Panel(self, wx.ID_ANY)
        self.BrowseImage = wx.Button(self.p3, wx.ID_ANY, "Browse...")
        self.BrowseSementation = wx.Button(self.p3, wx.ID_ANY, "Browse...")
        self.BrowseMojo = wx.Button(self.p3, wx.ID_ANY, "Browse...")
        self.cancel = wx.Button(self.p3, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.ExecuteImport, self.ok)
        self.Bind(wx.EVT_BUTTON, self.BrowseImageFolder, self.BrowseImage)
        self.Bind(wx.EVT_BUTTON, self.BrowseSegmentationFolder, self.BrowseSementation)
        self.Bind(wx.EVT_BUTTON, self.BrowseMojoFolder, self.BrowseMojo)
        self.Bind(wx.EVT_BUTTON, self.Cancel, self.cancel)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ImportImagesSegments.__set_properties
        self.SetTitle("Import Images & Segments")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("..\\icons\\Mojo2_16.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.p1.SetMinSize((180, 1000))
        self.SourceImageFolder.SetMinSize((426, 26))
        self.SourceSegmentationFolder.SetMinSize((426, 26))
        self.DestinationMojoFolder.SetMinSize((426, 26))
        self.ok.SetMinSize((88, 26))
        self.p2.SetMinSize((544, 2000))
        self.BrowseImage.SetMinSize((88, 26))
        self.BrowseSementation.SetMinSize((88, 26))
        self.BrowseMojo.SetMinSize((88, 26))
        self.cancel.SetMinSize((86, 26))
        self.p3.SetMinSize((100, 1500))
        # end wxGlade

        ###
        ###
        self.SourceImageFolder.SetValue( self.UserInfo.mojo_files_path )
        self.SourceSegmentationFolder.SetValue( self.UserInfo.mojo_files_path )
        self.DestinationMojoFolder.SetValue( self.UserInfo.mojo_files_path )
        ###
        ###

    def __do_layout(self):
        # begin wxGlade: ImportImagesSegments.__do_layout
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.s3 = wx.BoxSizer(wx.VERTICAL)
        s2 = wx.BoxSizer(wx.VERTICAL)
        s1 = wx.BoxSizer(wx.VERTICAL)
        TextImportImageFolder = wx.StaticText(self.p1, wx.ID_ANY, "Source Image Folder\n(TIFF/PNG)")
        TextImportImageFolder.SetMinSize((180, 30))
        s1.Add(TextImportImageFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        TextSourceSegmentationFolder = wx.StaticText(self.p1, wx.ID_ANY, "Source Segmentation Folder\n(TIFF/PNG)")
        TextSourceSegmentationFolder.SetMinSize((180, 30))
        s1.Add(TextSourceSegmentationFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        TextImportMojoFolder = wx.StaticText(self.p1, wx.ID_ANY, "Destination Mojo Folder")
        TextImportMojoFolder.SetMinSize((180, 30))
        s1.Add(TextImportMojoFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        self.p1.SetSizer(s1)
        sizer.Add(self.p1, 0, 0, 0)
        s2.Add(self.SourceImageFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 7)
        s2.Add(self.SourceSegmentationFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 7)
        s2.Add(self.DestinationMojoFolder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 7)
        s2.Add(self.ok, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.p2.SetSizer(s2)
        sizer.Add(self.p2, 1, 0, 0)
        self.s3.Add(self.BrowseImage, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.s3.Add(self.BrowseSementation, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.s3.Add(self.BrowseMojo, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.s3.Add(self.cancel, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 7)
        self.p3.SetSizer(self.s3)
        sizer.Add(self.p3, 0, 0, 0)
        self.SetSizer(sizer)
        self.Layout()
        # end wxGlade

        # http://wxpython-users.1045709.n5.nabble.com/parameter-passing-Question-td2338603.html

    def BrowseImageFolder(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        dpath = self.SourceImageFolder.GetValue()
        openFileDialog = wx.DirDialog(self, "Select Images Folder", dpath,
                                          wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST)
        openFileDialog.ShowModal()
        dir_input_images = openFileDialog.GetPath()
        openFileDialog.Destroy()
        self.SourceImageFolder.SetValue(dir_input_images)
        return True

    def BrowseSegmentationFolder(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        dpath = self.SourceSegmentationFolder.GetValue()
        openFileDialog = wx.DirDialog(self, "Select Segmentation Folder", dpath,
                                          wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST)
        openFileDialog.ShowModal()
        dir_input_ids = openFileDialog.GetPath()
        openFileDialog.Destroy()
        self.SourceSegmentationFolder.SetValue(dir_input_ids)
        return True

    def BrowseMojoFolder(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        dpath = self.DestinationMojoFolder.GetValue()
        openFileDialog = wx.DirDialog(self, "Select Mojo Import Folder", dpath,
                                          wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST)
        openFileDialog.ShowModal()
        dir_mojo = openFileDialog.GetPath()
        openFileDialog.Destroy()
        self.DestinationMojoFolder.SetValue(dir_mojo)
        return True

    def ExecuteImport(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        dir_input_images = self.SourceImageFolder.GetValue()
        dir_input_ids = self.SourceSegmentationFolder.GetValue()
        self.UserInfo.SetMojoPath(self.DestinationMojoFolder.GetValue())
        Flag1 = ImportImgSeg.images(self.UserInfo, dir_input_images)
        Flag2 = ImportImgSeg.ids(self.UserInfo, dir_input_ids)
        print Flag1
        print Flag2
        if Flag1 == False or Flag2 == False:
            print 'Mojo Files were not Correctly Created.'
            return False
        print 'Mojo Files were Created.'
        self.UserInfo.mojo_files_found = True
        self.Close()
        statusbar = ["Target Mojo Folder: " + self.UserInfo.mojo_files_path]
        for i in range(len(statusbar)):
            self.parent.MojoControlPanel_statusbar.SetStatusText(statusbar[i], i)
        return True

    def Cancel(self, event):  # wxGlade: ImportImagesSegments.<event_handler>
        self.Close()
        return False


# end of class ImportImagesSegments

class MojoControlPanel(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MojoControlPanel.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((454, 500))

        ###
        ###
        self.UserInfo = DefaultParams.User()
        ###
        ###

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        #####
        import_mojo = wx.MenuItem(wxglade_tmp_menu, 0, 'Import')
        import_mojo.SetBitmap(wx.Bitmap('..\\icons\\Folder_Import_16.png'))
        wxglade_tmp_menu.Append(import_mojo)
        self.Bind(wx.EVT_MENU, self.Import, id=0)
        #####
        select_mojo = wx.MenuItem(wxglade_tmp_menu, 1, 'Select Mojo Files Folder')
        select_mojo.SetBitmap(wx.Bitmap('..\\icons\\Database_16.png'))
        wxglade_tmp_menu.Append(select_mojo)
        self.Bind(wx.EVT_MENU, self.SelectMojoFile, id=1)
        #####
        #wxglade_tmp_menu.Append(2, "Copy Mojo File Folder to", "")
        #self.Bind(wx.EVT_MENU, self.ExportMojoFiles, id=2)

        copy_mojo = wx.MenuItem(wxglade_tmp_menu, 2, 'Copy Mojo Files Folder to')
        copy_mojo.SetBitmap(wx.Bitmap('..\\icons\\Copy_16.png'))
        wxglade_tmp_menu.Append(copy_mojo)
        self.Bind(wx.EVT_MENU, self.ExportMojoFiles, id=2)
        #####
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(3, "TIFF (16bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportImagesTiff16, id=3)
        wxglade_tmp_menu_sub.Append(4, "TIFF (8bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportImagesTiff8, id=4)
        wxglade_tmp_menu_sub.Append(5, "PNG (16bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportImagesPng16, id=5)
        wxglade_tmp_menu_sub.Append(6, "PNG (8bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportImagesPng8, id=6)
        wxglade_tmp_menu.Append(wx.ID_ANY, "Export Images", wxglade_tmp_menu_sub, "")

        #####
        #export_images = wx.MenuItem(wxglade_tmp_menu, 6, 'Export Images')
        #export_images.SetBitmap(wx.Bitmap('..\\icons\\Photo_Export16.png'))
        #wxglade_tmp_menu.Append(wx.ID_ANY, export_images, wxglade_tmp_menu_sub)
        #####

        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(7, "TIFF (16bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsTiff16, id=7)
        wxglade_tmp_menu_sub.Append(8, "TIFF (8bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsTiff8, id=8)
        wxglade_tmp_menu_sub.Append(9, "TIFF (8bit, Color)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsTiffRgb, id=9)
        wxglade_tmp_menu_sub.Append(10, "PNG (16bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsPng16, id=10)
        wxglade_tmp_menu_sub.Append(11, "PNG (8bit, Grayscale)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsPng8, id=11)
        wxglade_tmp_menu_sub.Append(12, "PNG (8bit, Color)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsPngRgb, id=12)
        wxglade_tmp_menu_sub.Append(13, "Numpy (32bit)", "")
        self.Bind(wx.EVT_MENU, self.ExportIdsNumpy, id=13)
        wxglade_tmp_menu.Append(wx.ID_ANY, "Export Segmentation", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.AppendSeparator()
        #####
        exit_mojo = wx.MenuItem(wxglade_tmp_menu, 14, 'Exit')
        exit_mojo.SetBitmap(wx.Bitmap('..\\icons\\Power_Off_16.png'))
        wxglade_tmp_menu.Append(exit_mojo)
        self.Bind(wx.EVT_MENU, self.Exit, id=14)
        #####

        #Power_Off_16.png
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()

    #####
        undo = wx.MenuItem(wxglade_tmp_menu, 15, 'Undo')
        undo.SetBitmap(wx.Bitmap('..\\icons\\Undo_16.png'))
        wxglade_tmp_menu.Append(undo)
        self.Bind(wx.EVT_MENU, self.Undo, id=15)
    #####

    #####
        redo = wx.MenuItem(wxglade_tmp_menu, 16, 'Redo')
        redo.SetBitmap(wx.Bitmap('..\\icons\\Redo_16.png'))
        wxglade_tmp_menu.Append(redo)
        self.Bind(wx.EVT_MENU, self.Redo, id=16)
    #####

        self.frame_menubar.Append(wxglade_tmp_menu, "Edit")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.MojoControlPanel_statusbar = self.CreateStatusBar(1)
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        self.nb1_3DMerge = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid1 = wx.grid.Grid(self.nb1_3DMerge, 1, size=(1, 1))
        self.checkbox_1 = wx.CheckBox(self.nb1_3DMerge, 1000, "")
        self.Execute1 = wx.Button(self.nb1_3DMerge, 11, "Execute")
        self.Clear1 = wx.Button(self.nb1_3DMerge, 12, "Clear")
        self.nb2_3DDisconnect = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid2 = wx.grid.Grid(self.nb2_3DDisconnect, 2, size=(1, 1))
        self.Execute2 = wx.Button(self.nb2_3DDisconnect, 21, "Execute")
        self.Clear2 = wx.Button(self.nb2_3DDisconnect, 22, "Clear")
        self.nb3_2DDisconnect = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid3 = wx.grid.Grid(self.nb3_2DDisconnect, 3, size=(1, 1))
        self.Execute3 = wx.Button(self.nb3_2DDisconnect, 31, "Execute")
        self.Clear3 = wx.Button(self.nb3_2DDisconnect, 32, "Clear")
        self.nb4_3DReplace = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid4 = wx.grid.Grid(self.nb4_3DReplace, 4, size=(1, 1))
        self.Execute4 = wx.Button(self.nb4_3DReplace, 41, "Execute")
        self.Clear4 = wx.Button(self.nb4_3DReplace, 42, "Clear")
        self.nb5_2DReplace = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid5 = wx.grid.Grid(self.nb5_2DReplace, 5, size=(1, 1))
        self.Execute5 = wx.Button(self.nb5_2DReplace, 51, "Execute")
        self.Clear5 = wx.Button(self.nb5_2DReplace, 52, "Clear")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols1, id=1)
        self.Bind(wx.EVT_BUTTON, self.Execute1_3DMerge, id=11)
        self.Bind(wx.EVT_BUTTON, self.Clear1_3DMerge, id=12)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols2, id=2)
        self.Bind(wx.EVT_BUTTON, self.Execute2_3Disconnect, id=21)
        self.Bind(wx.EVT_BUTTON, self.Clear2_3Disconnect, id=22)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols3, id=3)
        self.Bind(wx.EVT_BUTTON, self.Execute3_2Disconnect, id=31)
        self.Bind(wx.EVT_BUTTON, self.Clear3_2Disconnect, id=32)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols4, id=4)
        self.Bind(wx.EVT_BUTTON, self.Execute4_3DReplace, id=41)
        self.Bind(wx.EVT_BUTTON, self.Clear4_3DReplace, id=42)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols5, id=5)
        self.Bind(wx.EVT_BUTTON, self.Execute5_2DReplace, id=51)
        self.Bind(wx.EVT_BUTTON, self.Clear5_2DReplace, id=52)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MojoControlPanel.__set_properties
        self.SetTitle("Mojo Control Panel")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("..\\icons\\Mojo2_16.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.MojoControlPanel_statusbar.SetStatusWidths([-1])

        # statusbar fields

        #MojoControlPanel_statusbar_fields = ["Target Mojo Folder: None"]
        #for i in range(len(MojoControlPanel_statusbar_fields)):
        #    self.MojoControlPanel_statusbar.SetStatusText(MojoControlPanel_statusbar_fields[i], i)
        #self.frame_toolbar.Realize()

        MojoControlPanel_statusbar_fields = ["Target Mojo Folder: None"]
        for i in range(len(MojoControlPanel_statusbar_fields)):
            self.MojoControlPanel_statusbar.SetStatusText(MojoControlPanel_statusbar_fields[i], i)
        # self.MojoControlPanel_statusbar.Realize()

        self.grid1.CreateGrid(10, 3)
        self.grid1.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid1.SetColLabelValue(0, "Conn1")
        self.grid1.SetColLabelValue(1, "Conn2")
        self.grid1.SetColLabelValue(2, "Conn3")
        self.Execute1.SetMinSize((88, 26))
        self.grid2.CreateGrid(10, 2)
        self.grid2.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid2.SetColLabelValue(0, "Target Id")
        self.grid2.SetColSize(0, 120)
        self.grid2.SetColLabelValue(1, "Dilute(+)/Erode(-)")
        self.grid2.SetColSize(1, 120)
        self.Execute2.SetMinSize((88, 26))
        self.grid3.CreateGrid(10, 2)
        self.grid3.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid3.SetColLabelValue(0, "Image No")
        self.grid3.SetColSize(0, 120)
        self.grid3.SetColLabelValue(1, "Target Id")
        self.grid3.SetColSize(1, 120)
        self.Execute3.SetMinSize((88, 26))
        self.grid4.CreateGrid(10, 2)
        self.grid4.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid4.SetColLabelValue(0, "Target Id")
        self.grid4.SetColSize(0, 120)
        self.grid4.SetColLabelValue(1, "Destination Id")
        self.grid4.SetColSize(1, 120)
        self.Execute4.SetMinSize((88, 26))
        self.grid5.CreateGrid(10, 3)
        self.grid5.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid5.SetColLabelValue(0, "Image No")
        self.grid5.SetColSize(0, 100)
        self.grid5.SetColLabelValue(1, "Target Id")
        self.grid5.SetColSize(1, 100)
        self.grid5.SetColLabelValue(2, "Destination Id")
        self.grid5.SetColSize(2, 100)
        self.Execute5.SetMinSize((88, 26))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MojoControlPanel.__do_layout
        s0 = wx.BoxSizer(wx.VERTICAL)
        s5 = wx.BoxSizer(wx.VERTICAL)
        s52 = wx.BoxSizer(wx.HORIZONTAL)
        s51 = wx.BoxSizer(wx.HORIZONTAL)
        s4 = wx.BoxSizer(wx.VERTICAL)
        s42 = wx.BoxSizer(wx.HORIZONTAL)
        s41 = wx.BoxSizer(wx.HORIZONTAL)
        s3 = wx.BoxSizer(wx.VERTICAL)
        s32 = wx.BoxSizer(wx.HORIZONTAL)
        s31 = wx.BoxSizer(wx.HORIZONTAL)
        s2 = wx.BoxSizer(wx.VERTICAL)
        s22 = wx.BoxSizer(wx.HORIZONTAL)
        s21 = wx.BoxSizer(wx.HORIZONTAL)
        s1 = wx.BoxSizer(wx.VERTICAL)
        s13 = wx.BoxSizer(wx.HORIZONTAL)
        s12 = wx.BoxSizer(wx.HORIZONTAL)
        s11 = wx.BoxSizer(wx.HORIZONTAL)
        bitmap_1 = wx.StaticBitmap(self.nb1_3DMerge, wx.ID_ANY, wx.Bitmap("..\\icons\\Merge3D_32.png", wx.BITMAP_TYPE_ANY))
        s11.Add(bitmap_1, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label1 = wx.StaticText(self.nb1_3DMerge, wx.ID_ANY, "3D Merge")
        s11.Add(label1, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s1.Add(s11, 0, 0, 0)
        s1.Add(self.grid1, 1, wx.ALL | wx.EXPAND, 5)
        s12.Add(self.checkbox_1, 0, wx.ALL, 5)
        label_1 = wx.StaticText(self.nb1_3DMerge, wx.ID_ANY, "Select the best one in adjacent objects at each image")
        s12.Add(label_1, 0, wx.ALL, 5)
        s1.Add(s12, 0, wx.ALL, 5)
        s13.Add(self.Execute1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s13.Add(self.Clear1, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s1.Add(s13, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb1_3DMerge.SetSizer(s1)
        bitmap_2 = wx.StaticBitmap(self.nb2_3DDisconnect, wx.ID_ANY, wx.Bitmap("..\\icons\\Split3D_32.png", wx.BITMAP_TYPE_ANY))
        s21.Add(bitmap_2, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label2 = wx.StaticText(self.nb2_3DDisconnect, wx.ID_ANY, "3D Disconnect")
        s21.Add(label2, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s2.Add(s21, 0, 0, 0)
        s2.Add(self.grid2, 1, wx.ALL | wx.EXPAND, 5)
        s22.Add(self.Execute2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s22.Add(self.Clear2, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s2.Add(s22, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb2_3DDisconnect.SetSizer(s2)
        bitmap_3 = wx.StaticBitmap(self.nb3_2DDisconnect, wx.ID_ANY, wx.Bitmap("..\\icons\\Split2D_32.png", wx.BITMAP_TYPE_ANY))
        s31.Add(bitmap_3, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label3 = wx.StaticText(self.nb3_2DDisconnect, wx.ID_ANY, "2D Disconnect")
        s31.Add(label3, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s3.Add(s31, 0, 0, 0)
        s3.Add(self.grid3, 1, wx.ALL | wx.EXPAND, 5)
        s32.Add(self.Execute3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s32.Add(self.Clear3, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s3.Add(s32, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb3_2DDisconnect.SetSizer(s3)
        bitmap_4 = wx.StaticBitmap(self.nb4_3DReplace, wx.ID_ANY, wx.Bitmap("..\\icons\\Replace3D_32.png", wx.BITMAP_TYPE_ANY))
        s41.Add(bitmap_4, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label4 = wx.StaticText(self.nb4_3DReplace, wx.ID_ANY, "3D Replace")
        s41.Add(label4, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s4.Add(s41, 0, 0, 0)
        s4.Add(self.grid4, 1, wx.ALL | wx.EXPAND, 5)
        s42.Add(self.Execute4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s42.Add(self.Clear4, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s4.Add(s42, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb4_3DReplace.SetSizer(s4)
        bitmap_5 = wx.StaticBitmap(self.nb5_2DReplace, wx.ID_ANY, wx.Bitmap("..\\icons\\Replace2D_32.png", wx.BITMAP_TYPE_ANY))
        s51.Add(bitmap_5, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label5 = wx.StaticText(self.nb5_2DReplace, wx.ID_ANY, "2D Replace")
        s51.Add(label5, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s5.Add(s51, 0, 0, 0)
        s5.Add(self.grid5, 1, wx.ALL | wx.EXPAND, 5)
        s52.Add(self.Execute5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s52.Add(self.Clear5, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s5.Add(s52, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb5_2DReplace.SetSizer(s5)
        self.notebook_1.AddPage(self.nb1_3DMerge, "3D Merge")
        self.notebook_1.AddPage(self.nb2_3DDisconnect, "3D Disconnect")
        self.notebook_1.AddPage(self.nb3_2DDisconnect, "2D Disconnect")
        self.notebook_1.AddPage(self.nb4_3DReplace, "3D Replace")
        self.notebook_1.AddPage(self.nb5_2DReplace, "2D Replace")
        s0.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(s0)
        self.Layout()
        # end wxGlade


    def Import(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        # self.MousePosition = event.GetPosition()
        self.ImportImagesSegments = ImportImagesSegments(self, wx.ID_ANY, "",sim_name=[self, self.UserInfo])
        self.ImportImagesSegments.Show()


    def SelectMojoFile(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectMojoFolder(self,event, self.UserInfo)

    def ExportMojoFiles(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectMojoExportFolder(self, event, self.UserInfo)

    def ExportImagesTiff16(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectImageExportFolder(self, event, self.UserInfo,'tif16')

    def ExportImagesTiff8(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectImageExportFolder(self, event, self.UserInfo,'tif8')

    def ExportImagesPng16(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectImageExportFolder(self, event, self.UserInfo,'png16')

    def ExportImagesPng8(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectImageExportFolder(self, event, self.UserInfo,'png8')

    def ExportIdsTiff16(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'tif16')

    def ExportIdsTiff8(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'tif8')

    def ExportIdsTiffRgb(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'tifc')

    def ExportIdsPng16(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'png16')

    def ExportIdsPng8(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'png8')

    def ExportIdsPngRgb(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'pngc')

    def ExportIdsNumpy(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.SelectIdsExportFolder(self, event, self.UserInfo, 'npy')

    def Exit(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.Close()

    def Undo(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        UndoRedo.Undo(self.UserInfo)
        # print("Event handler 'Undo' not implemented!")
        # event.Skip()

    def Redo(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        UndoRedo.Redo(self.UserInfo)
        # print("Event handler 'Redo' not implemented!")
        # event.Skip()


    ###
    ###

    #  ----------------------------------------------------------------------
    # I want to move the AppendRowsCols1 to wxDialog.py
    #  ----------------------------------------------------------------------

    def AppendRowsCols1(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        if not hasattr(self, "popupID1"):
            self.popupID1 = wx.NewId()
            self.popupID2 = wx.NewId()
            self.Bind(wx.EVT_MENU, self.OnPopupOne1, id=self.popupID1)
            self.Bind(wx.EVT_MENU, self.OnPopupTwo1, id=self.popupID2)
        menu = wx.Menu()
        menu.Append(self.popupID1, "Add Row")
        menu.Append(self.popupID2, "Add Col")
        self.PopupMenu(menu) ###
        menu.Destroy()
    def OnPopupOne1(self, event):
        self.grid1.AppendRows(1)
    def OnPopupTwo1(self, event):
        self.grid1.AppendCols(1)
        n = self.grid1.GetNumberCols()
        self.grid1.SetColLabelValue(n-1, "Conn"+ str(n))

    def Execute1_3DMerge(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.Execute3DMerger(self, event)

    def Clear1_3DMerge(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.grid1.ClearGrid()


        #  ----------------------------------------------------------------------
        # I want to move the AppendRowsCols2 to wxDialog.py
        #  ----------------------------------------------------------------------

    def AppendRowsCols2(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        if not hasattr(self, "popupID01"):
            self.popupID21 = wx.NewId()
            self.Bind(wx.EVT_MENU, self.OnPopupOne21, id=self.popupID21)
        menu = wx.Menu()
        menu.Append(self.popupID21, "Add Row")
        self.PopupMenu(menu)  ###
        menu.Destroy()

    def OnPopupOne21(self, event):
        self.grid2.AppendRows(1)
        #  ----------------------------------------------------------------------

    def Execute2_3Disconnect(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        wxDialogs.Execute3DDisconnector(self, event)

    def Clear2_3Disconnect(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.grid2.ClearGrid()

    def AppendRowsCols3(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'AppendRowsCols3' not implemented!")
        event.Skip()

    def Execute3_2Disconnect(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'Execute3_2Disconnect' not implemented!")
        event.Skip()

    def Clear3_2Disconnect(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.grid3.ClearGrid()

    def AppendRowsCols4(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'AppendRowsCols4' not implemented!")
        event.Skip()

    def Execute4_3DReplace(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'Execute4_3DReplace' not implemented!")
        event.Skip()

    def Clear4_3DReplace(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.grid4.ClearGrid()

    def AppendRowsCols5(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'AppendRowsCols5' not implemented!")
        event.Skip()

    def Execute5_2DReplace(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        print("Event handler 'Execute5_2DReplace' not implemented!")
        event.Skip()

    def Clear5_2DReplace(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        self.grid5.ClearGrid()


# end of class MojoControlPanel

class MyApp(wx.App):
    def OnInit(self):
        self.MojoControlPanel = MojoControlPanel(None, wx.ID_ANY, "")
        self.SetTopWindow(self.MojoControlPanel)
        self.MojoControlPanel.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
