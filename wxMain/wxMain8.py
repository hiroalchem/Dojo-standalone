#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.1 on Mon Jul 09 23:51:09 2018
#

################{
################

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import wx
import wx.adv
import wx.grid
import sys
import os

import json
from  collections import OrderedDict

from wxFileIO import wxFileIO
from wxConnect3D import wxConnect3D
from wxDisconnect3D import wxDisconnect3D
from wxDisconnect2D import wxDisconnect2D
from wxReplace3D import wxReplace3D
from wxReplace2D import wxReplace2D
from wxCredit import wxCredit

from os import path, pardir
main_dir = path.abspath(path.dirname(sys.argv[0]))  # Dir of main
icon_dir    = path.join(main_dir, "icons")
Plugins_dir = path.join(main_dir, "Plugins")
sys.path.append(path.join(main_dir, "Plugins"))
sys.path.append(os.path.join(main_dir, "Filesystem"))

#current_dir = path.abspath(path.dirname(__file__))  # Dir of script
#parent_dir  = path.abspath(path.join(current_dir, pardir))  # Parent dir of script
#icon_dir    = path.join(parent_dir, "icons")
#sys.path.append(path.join(parent_dir, "Plugins"))
#sys.path.append(os.path.join(parent_dir, "Filesystem"))

from wxPlugins import wxPlugins


from Params import Params
import UndoRedo

################
################}

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class ControlPanel(wx.Frame, wxPlugins, wxFileIO,
                   wxConnect3D, wxDisconnect3D, wxDisconnect2D,
                   wxReplace3D, wxReplace2D, wxCredit):
    def __init__(self, *args, **kwds):

        ##
        ##
        [self.parent, self.u_info] = kwds.pop('sim_name')
        self.show_stdout_from_dojo = None
        ##
        ##

        # begin wxGlade: ControlPanel.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((454, 534))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()

        ##{
        self.import_mojo = wx.MenuItem(wxglade_tmp_menu, 0, 'Import')
        self.import_mojo.SetBitmap(wx.Bitmap(  path.join(icon_dir, "Folder_Import_16.png")  ))
        wxglade_tmp_menu.Append(self.import_mojo)
        self.Bind(wx.EVT_MENU, self.Import, id=0)

        self.select_dojo = wx.MenuItem(wxglade_tmp_menu, 1, 'Open Dojo Folder')
        self.select_dojo.SetBitmap(wx.Bitmap(   path.join(icon_dir, "Database_16.png")  ))
        wxglade_tmp_menu.Append(self.select_dojo)
        self.Bind(wx.EVT_MENU, self.SelectDojoFile, id=1)

        self.close_dojo = wx.MenuItem(wxglade_tmp_menu, 12, 'Close Dojo Folder')
        self.close_dojo.SetBitmap(wx.Bitmap(   path.join(icon_dir, "Close_16.png")  ))
        self.close_dojo.SetDisabledBitmap( wx.Bitmap(path.join(icon_dir, "Disabled/Close_16.png")) )
        wxglade_tmp_menu.Append(self.close_dojo)
        self.Bind(wx.EVT_MENU, self.CloseDojoFiles, id=12)

        self.save_dojo = wx.MenuItem(wxglade_tmp_menu, 2, 'Save Dojo Folder')
        self.save_dojo.SetBitmap(wx.Bitmap(   path.join(icon_dir, "Save16.png")   ))
        self.save_dojo.SetDisabledBitmap( wx.Bitmap(path.join(icon_dir, "Disabled/Save16.png")) )
        wxglade_tmp_menu.Append(self.save_dojo)
        self.Bind(wx.EVT_MENU, self.SaveDojoFiles, id=2)

        self.copy_dojo = wx.MenuItem(wxglade_tmp_menu, 3, 'Export Dojo Folder')
        self.copy_dojo.SetBitmap(wx.Bitmap(   path.join(icon_dir, "Database_Right16.png")  ))
        self.copy_dojo.SetDisabledBitmap( wx.Bitmap(path.join(icon_dir, "Disabled/Database16.png")) )
        wxglade_tmp_menu.Append(self.copy_dojo)
        self.Bind(wx.EVT_MENU, self.ExportDojoFiles, id=3)

        self.export_image = wx.MenuItem(wxglade_tmp_menu, 4, 'Export Images')
        self.export_image.SetBitmap(wx.Bitmap(  path.join(icon_dir, "Photo_Right16.png")  ))
        self.export_image.SetDisabledBitmap( wx.Bitmap(path.join(icon_dir, "Disabled/Photo16.png")) )
        wxglade_tmp_menu.Append(self.export_image)
        self.Bind(wx.EVT_MENU, self.ExportImages, id=4)

        self.export_ids = wx.MenuItem(wxglade_tmp_menu, 5, 'Export Segmentation')
        self.export_ids.SetBitmap(wx.Bitmap(  path.join(icon_dir, "Object_Right16.png")  ))
        self.export_ids.SetDisabledBitmap( wx.Bitmap(path.join(icon_dir, "Disabled/Object16.png")) )
        wxglade_tmp_menu.Append(self.export_ids)
        self.Bind(wx.EVT_MENU, self.ExportSegmentation, id=5)

        exit_dojo = wx.MenuItem(wxglade_tmp_menu, 6, 'Exit')
        exit_dojo.SetBitmap(wx.Bitmap(  path.join(icon_dir, "Power_Off_16.png")  ))
        wxglade_tmp_menu.Append(exit_dojo)
        self.Bind(wx.EVT_MENU, self.Exit, id=6)

        self.import_mojo.Enable(enable=True)
        self.select_dojo.Enable(enable=True)
        self.copy_dojo.Enable(enable=False)
        self.save_dojo.Enable(enable=False)
        self.close_dojo.Enable(enable=False)
        self.export_image.Enable(enable=False)
        self.export_ids.Enable(enable=False)

        ##}

        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()

        ##{
        undo = wx.MenuItem(wxglade_tmp_menu, 61, 'Undo')
        undo.SetBitmap(wx.Bitmap(  path.join(icon_dir, "Undo_16.png")  ))
        wxglade_tmp_menu.Append(undo)
        self.Bind(wx.EVT_MENU, self.Undo, id=61)
        redo = wx.MenuItem(wxglade_tmp_menu, 62, 'Redo')
        redo.SetBitmap(wx.Bitmap(  path.join(icon_dir, "Redo_16.png")  ))
        wxglade_tmp_menu.Append(redo)
        self.Bind(wx.EVT_MENU, self.Redo, id=62)
        ##}

        self.frame_menubar.Append(wxglade_tmp_menu, "Edit")

        ##{
        with open( path.join(Plugins_dir, self.u_info.fname_plugins_menu) , 'r' ) as fp:
            e = json.load(fp, object_pairs_hook=OrderedDict)
        i = 10000
        menu_stack  = [wx.Menu()]
        snum_stack  = []
        sname_stack = []

        try:
            items = e.iteritems()   # python2.7
        except:
            items = e.items()    # python3

        for key, val in items:
            # print('Sub: ' , val['Sub'])
            # print('i: ', i)
            # print('menu_stack: ', menu_stack)
            # print('snum_stack: ', snum_stack)
            # print('sname_stack: ', sname_stack)

            if val['Sub'] > 0:
                menu_stack.append( wx.Menu() )
                snum_stack = snum_stack + [ val['Sub'] ]
                sname_stack.append( key )
            else:
                menu_stack[-1].Append(i, key, "")
                # self.Bind(wx.EVT_MENU, getattr(self,val['Func'].encode('utf-8')), id=i)   # ?
                self.Bind(wx.EVT_MENU, getattr(self, val['Func']), id=i)
                i = i + 1
            while(snum_stack and snum_stack[-1] <= 0):
                menu_stack[-2].Append(wx.ID_ANY, sname_stack[-1], menu_stack[-1], "")
                menu_stack.pop()
                sname_stack.pop()
                snum_stack.pop()
            if snum_stack and (snum_stack[-1] > 0):
                snum_stack[-1] = snum_stack[-1] - 1
        ##}

        self.frame_menubar.Append(menu_stack[-1], "Plugins")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "About Dojo", "")
        self.Bind(wx.EVT_MENU, self.AboutDojo, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.frame_statusbar = self.CreateStatusBar(1)


        self.panel_URL = wx.Panel(self, wx.ID_ANY)
        self.DojoHTTP = wx.adv.HyperlinkCtrl(self.panel_URL, wx.ID_ANY, "Open Dojo File Folder", "")


        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        self.nb1_3DMerge = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid1 = wx.grid.Grid(self.nb1_3DMerge, 1, size=(1, 1))
        self.checkbox_1 = wx.CheckBox(self.nb1_3DMerge, 1000, "")
        self.Execute1 = wx.Button(self.nb1_3DMerge, 11, "Execute")
        self.Clear1 = wx.Button(self.nb1_3DMerge, 12, "Clear")
        self.nb2_3DDisconnect = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid2 = wx.grid.Grid(self.nb2_3DDisconnect, 2, size=(1, 1))
        self.Execute2 = wx.Button(self.nb2_3DDisconnect, 21, "Execute")
        self.Clear2 = wx.Button(self.nb2_3DDisconnect, 22, "Clear")
        self.nb3_2DDisconnect = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid3 = wx.grid.Grid(self.nb3_2DDisconnect, 3, size=(1, 1))
        self.Execute3 = wx.Button(self.nb3_2DDisconnect, 31, "Execute")
        self.Clear3 = wx.Button(self.nb3_2DDisconnect, 32, "Clear")
        self.nb4_3DReplace = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid4 = wx.grid.Grid(self.nb4_3DReplace, 4, size=(1, 1))
        self.Execute4 = wx.Button(self.nb4_3DReplace, 41, "Execute")
        self.Clear4 = wx.Button(self.nb4_3DReplace, 42, "Clear")
        self.nb5_2DReplace = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.grid5 = wx.grid.Grid(self.nb5_2DReplace, 5, size=(1, 1))
        self.Execute5 = wx.Button(self.nb5_2DReplace, 51, "Execute")
        self.Clear5 = wx.Button(self.nb5_2DReplace, 52, "Clear")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols1, id=1)
        self.Bind(wx.EVT_BUTTON, self.Execute1_3DMerge, id=11)
        self.Bind(wx.EVT_BUTTON, self.Clear1_3DMerge, id=12)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols2, id=2)
        self.Bind(wx.EVT_BUTTON, self.Execute2_3Disconnect, id=21)
        self.Bind(wx.EVT_BUTTON, self.Clear2_3Disconnect, id=22)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols3, id=3)
        self.Bind(wx.EVT_BUTTON, self.Execute3_2Disconnect, id=31)
        self.Bind(wx.EVT_BUTTON, self.Clear3_2Disconnect, id=32)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols4, id=4)
        self.Bind(wx.EVT_BUTTON, self.Execute4_3DReplace, id=41)
        self.Bind(wx.EVT_BUTTON, self.Clear4_3DReplace, id=42)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.AppendRowsCols5, id=5)
        self.Bind(wx.EVT_BUTTON, self.Execute5_2DReplace, id=51)
        self.Bind(wx.EVT_BUTTON, self.Clear5_2DReplace, id=52)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ControlPanel.__set_properties
        self.SetTitle("Dojo Control Panel")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap(  path.join(icon_dir, "Mojo2_16.png")   , wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.frame_statusbar.SetStatusWidths([-1])

        # statusbar fields
        frame_statusbar_fields = ["Target Dojo"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)
        self.grid1.CreateGrid(10, 3)
        self.grid1.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid1.SetColLabelValue(0, "Conn1")
        self.grid1.SetColLabelValue(1, "Conn2")
        self.grid1.SetColLabelValue(2, "Conn3")
        self.Execute1.SetMinSize((88, 26))
        self.grid2.CreateGrid(10, 2)
        self.grid2.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid2.SetColLabelValue(0, "Target Id")
        self.grid2.SetColSize(0, 120)
        self.grid2.SetColLabelValue(1, "Dilute(+)/Erode(-)")
        self.grid2.SetColSize(1, 120)
        self.Execute2.SetMinSize((88, 26))
        self.grid3.CreateGrid(10, 2)
        self.grid3.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid3.SetColLabelValue(0, "Image No")
        self.grid3.SetColSize(0, 120)
        self.grid3.SetColLabelValue(1, "Target Id")
        self.grid3.SetColSize(1, 120)
        self.Execute3.SetMinSize((88, 26))
        self.grid4.CreateGrid(10, 2)
        self.grid4.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid4.SetColLabelValue(0, "Target Id")
        self.grid4.SetColSize(0, 120)
        self.grid4.SetColLabelValue(1, "Destination Id")
        self.grid4.SetColSize(1, 120)
        self.Execute4.SetMinSize((88, 26))
        self.grid5.CreateGrid(10, 3)
        self.grid5.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid5.SetColLabelValue(0, "Image No")
        self.grid5.SetColSize(0, 100)
        self.grid5.SetColLabelValue(1, "Target Id")
        self.grid5.SetColSize(1, 100)
        self.grid5.SetColLabelValue(2, "Destination Id")
        self.grid5.SetColSize(2, 100)
        self.Execute5.SetMinSize((88, 26))
        # end wxGlade



    def __do_layout(self):
        # begin wxGlade: ControlPanel.__do_layout
        s0 = wx.BoxSizer(wx.VERTICAL)
        s5 = wx.BoxSizer(wx.VERTICAL)
        s52 = wx.BoxSizer(wx.HORIZONTAL)
        s51 = wx.BoxSizer(wx.HORIZONTAL)
        s4 = wx.BoxSizer(wx.VERTICAL)
        s42 = wx.BoxSizer(wx.HORIZONTAL)
        s41 = wx.BoxSizer(wx.HORIZONTAL)
        s3 = wx.BoxSizer(wx.VERTICAL)
        s32 = wx.BoxSizer(wx.HORIZONTAL)
        s31 = wx.BoxSizer(wx.HORIZONTAL)
        s2 = wx.BoxSizer(wx.VERTICAL)
        s22 = wx.BoxSizer(wx.HORIZONTAL)
        s21 = wx.BoxSizer(wx.HORIZONTAL)
        s1 = wx.BoxSizer(wx.VERTICAL)
        s13 = wx.BoxSizer(wx.HORIZONTAL)
        s12 = wx.BoxSizer(wx.HORIZONTAL)
        s11 = wx.BoxSizer(wx.HORIZONTAL)

        self.ss1 = wx.BoxSizer(wx.HORIZONTAL)
        URL_Text = wx.StaticText(self.panel_URL, wx.ID_ANY, "URL")
        self.ss1.Add(URL_Text, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 4)
        self.ss1.Add(self.DojoHTTP, 0, wx.ALL, 4)
        self.panel_URL.SetSizer(self.ss1)

        self.panel_URL.Hide()

        s0.Add(self.panel_URL, 0, wx.ALL | wx.EXPAND, 0)
        bitmap_1 = wx.StaticBitmap(self.nb1_3DMerge, wx.ID_ANY, wx.Bitmap(path.join(icon_dir, "Merge3D_32.png") , wx.BITMAP_TYPE_ANY))
        s11.Add(bitmap_1, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label1 = wx.StaticText(self.nb1_3DMerge, wx.ID_ANY, "3D Merge")
        s11.Add(label1, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s1.Add(s11, 0, 0, 0)
        s1.Add(self.grid1, 1, wx.ALL | wx.EXPAND, 5)
        s12.Add(self.checkbox_1, 0, wx.ALL, 5)
        label_1 = wx.StaticText(self.nb1_3DMerge, wx.ID_ANY, "Select the most overlapped one at each layer\n")
        s12.Add(label_1, 0, wx.ALL, 5)
        s1.Add(s12, 0, wx.ALL, 5)
        s13.Add(self.Execute1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s13.Add(self.Clear1, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s1.Add(s13, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb1_3DMerge.SetSizer(s1)
        bitmap_2 = wx.StaticBitmap(self.nb2_3DDisconnect, wx.ID_ANY, wx.Bitmap( path.join(icon_dir, "Split3D_32.png") , wx.BITMAP_TYPE_ANY))
        s21.Add(bitmap_2, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label2 = wx.StaticText(self.nb2_3DDisconnect, wx.ID_ANY, "3D Disconnect")
        s21.Add(label2, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s2.Add(s21, 0, 0, 0)
        s2.Add(self.grid2, 1, wx.ALL | wx.EXPAND, 5)
        s22.Add(self.Execute2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s22.Add(self.Clear2, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s2.Add(s22, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb2_3DDisconnect.SetSizer(s2)
        bitmap_3 = wx.StaticBitmap(self.nb3_2DDisconnect, wx.ID_ANY, wx.Bitmap( path.join(icon_dir, "Split2D_32.png") , wx.BITMAP_TYPE_ANY))
        s31.Add(bitmap_3, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label3 = wx.StaticText(self.nb3_2DDisconnect, wx.ID_ANY, "2D Disconnect")
        s31.Add(label3, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s3.Add(s31, 0, 0, 0)
        s3.Add(self.grid3, 1, wx.ALL | wx.EXPAND, 5)
        s32.Add(self.Execute3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s32.Add(self.Clear3, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s3.Add(s32, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb3_2DDisconnect.SetSizer(s3)
        bitmap_4 = wx.StaticBitmap(self.nb4_3DReplace, wx.ID_ANY, wx.Bitmap( path.join(icon_dir, "Replace3D_32.png") , wx.BITMAP_TYPE_ANY))
        s41.Add(bitmap_4, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label4 = wx.StaticText(self.nb4_3DReplace, wx.ID_ANY, "3D Replace")
        s41.Add(label4, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s4.Add(s41, 0, 0, 0)
        s4.Add(self.grid4, 1, wx.ALL | wx.EXPAND, 5)
        s42.Add(self.Execute4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s42.Add(self.Clear4, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s4.Add(s42, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb4_3DReplace.SetSizer(s4)
        bitmap_5 = wx.StaticBitmap(self.nb5_2DReplace, wx.ID_ANY, wx.Bitmap( path.join(icon_dir, "Replace2D_32.png") , wx.BITMAP_TYPE_ANY))
        s51.Add(bitmap_5, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label5 = wx.StaticText(self.nb5_2DReplace, wx.ID_ANY, "2D Replace")
        s51.Add(label5, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        s5.Add(s51, 0, 0, 0)
        s5.Add(self.grid5, 1, wx.ALL | wx.EXPAND, 5)
        s52.Add(self.Execute5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        s52.Add(self.Clear5, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 5)
        s5.Add(s52, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        self.nb5_2DReplace.SetSizer(s5)
        self.notebook_1.AddPage(self.nb1_3DMerge, "3D Merge")
        self.notebook_1.AddPage(self.nb2_3DDisconnect, "3D Disconnect")
        self.notebook_1.AddPage(self.nb3_2DDisconnect, "2D Disconnect")
        self.notebook_1.AddPage(self.nb4_3DReplace, "3D Replace")
        self.notebook_1.AddPage(self.nb5_2DReplace, "2D Replace")
        s0.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(s0)
        self.Layout()
        # end wxGlade


    def Undo(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        UndoRedo.Undo(self.u_info)
        # print("Event handler 'Undo' not implemented!")
        # event.Skip()

    def Redo(self, event):  # wxGlade: MojoControlPanel.<event_handler>
        UndoRedo.Redo(self.u_info)
        # print("Event handler 'Redo' not implemented!")
        # event.Skip()



# end of class ControlPanel

class DojoControlPanel(wx.App):
    def OnInit(self):

        self.u_info = User()
        self.control_panel = ControlPanel(None, wx.ID_ANY, "",sim_name=[self, self.u_info])
        self.SetTopWindow(self.control_panel)
        self.control_panel.Show()
        return True

# end of class DojoControlPanel

if __name__ == "__main__":
    app = DojoControlPanel(0)
    app.MainLoop()
